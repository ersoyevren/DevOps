apiVersion: v1
kind: Pod
metadata:
  name: frontendpod
  labels:
    app: frontend
    deployment: test
spec:
  containers:
  - name: nginx
    image: nginx:latest
    ports:
    - containerPort: 80
---
apiVersion: v1
kind: Pod
metadata:
  name: cachepod
spec:
  affinity:
    podAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: app
            operator: In
            values:
            - frontend
        topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 1
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: color
              operator: In
              values:
              - blue
          topologyKey: kubernetes.io/hostname
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: deployment
              operator: In
              values:
              - prod
          topologyKey: topology.kubernetes.io/zone
  containers:
  - name: cachecontainer
    image: redis:6-alpine

    # Aciklama
    # Eğer biz podu hangi kriterlere sahip node üzerinde oluşturmamızı belirleyeceksek
    # nodeaffinity yi kullanırız. Fakat eğer biz pod u oluştururken diğer podları da kriter 
    # olarak kabul ediyorsak o zaman podaffinity i kullanmalıyız.

    # pod affinity de topologyKey: kubernetes.io/hostname bizim kriterimiz oluyor. Yani podun 
    # color=blue labelina sahip pod ile ayni hostname yani workernode altinda olusmasini istiyoruz.
   
   # nodeaffinity den ayrisan bir yonu de eger o hostname veya zone da olusmasini istemiyorsak 
   # notIn degil burada antiaffinity yi kullaniyoruz. ornekte antiaffinity de label kisminda 
   # deployment=prod ile ayni zone da olusmasin demek istiyoruz.